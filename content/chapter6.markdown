## 第六章
### 文件系统

文件系统的目的是组织和存储数据，典型的文件系统支持用户和程序间的数据共享，它也保证数据的持久化——重启之后仍然可用。

xv6的文件系统提供类似 Unix 的文件，文件描述符，目录和路经名（请参阅第零章），并且把数据存储到一块 IDE 磁盘上（请参阅第三章）。这个文件系统解决了几大难题：

* 该文件系统需要在磁盘上的数据结构来表示文件、目录树，这棵树用于标识每个文件用于存储数据的块以及磁盘上哪些区域是空闲的。
* 该文件系统必须支持错误恢复，也就是说，如果系统崩溃了（比如掉电了），文件系统必须在重启后仍能正常工作。问题在于一次系统崩溃可能打断一连串的更新操作，从而使得磁盘上的数据结构变得不一致（例如：有的块同时被标记为被使用和空闲）。
* 不同的进程可能同时操作文件系统，这种并行不能破坏文件系统的正常工作。
* 访问磁盘比访问内存要慢几个数量级，所以文件系统必须要维护一个内存内的 cache 用于缓存常被访问的块。

这一章的剩余内容将阐述 xv6 是如何解决这些问题的。

### 概述

xv6 文件系统的分6层实现，如图6-1所示。最下面一层通过缓冲器高速缓存读写 IDE 硬盘，它同步了访问磁盘操作，保证同时只有一个内核进程可以修改磁盘块中存有的数据。第二层使得更高的几层可以将对磁盘的更新封装成一次一次的会话，通过会话的方式来保证这些磁盘块的更新操作是原子操作（他们要么都被更新，要么都不被更新）。第三层提供无名文件，每一个这样的文件由一个 inode 和一连串的数据块组成。第四层将目录实现为一种特殊的 inode，它的内容是一连串的目录项，每一个目录项包含一个名字和指向这个名字对应文件的 inode。第五层提供了有层次结构的路经名（如/usr/rtm/xv6/fs.c这样的），这一层通过递归的方式来查询一个路径对应的文件。最后一层将许多 Unix 的资源（如通道，设备，文件等）抽象为文件系统的接口，极大地简化了程序员的工作。

文件系统必须设计好在磁盘上的什么地方放置 inode 和数据块。xv6把磁盘划分为几个区块，如图6-2所示。文件系统不使用第0块（第0块存有 bootloader）。第一块叫做超级块；它包含了文件系统的元信息（如文件系统的总块数，数据块块数，inode 数，以及 log 的块数）。从第2块开始存放inode，每一块能够存放多个 inode。接下来的块存有用于记录空闲块的位图。剩下的大部分块是数据块，它们存有文件和目录的内容。在磁盘的最后还有 日志块，它们是会话层的一部分，将在后面详述。

### 缓冲器高速缓存层

缓冲器高速缓存（以后简称高速缓存）有两个任务：（1）同步对磁盘的访问，使得同一时间只有一个块在内存中并且只有一个内核进程使用它；（2）缓存常用的块避免它们再从缓慢的磁盘中再读出。代码请参见 bio.c。

高速缓存提供的的主要接口是 bread 和 bwrite；前者从磁盘中取出一块缓存入内存中被读写，后者把内存缓冲区中的一块写到磁盘上正确的地方。当内核处理完一个缓冲块之后，需要调用 brelse 释放它。

高速缓存通过仅允许最多一个内核线程拥有对缓冲块的引用来同步对磁盘的访问，如果一个内核线程拥有一个缓冲快，但还没有释放他，那么其他调用 bread 的进程就会阻塞等待。文件系统的更高几层依赖高速缓存层的同步机制来保证正确性。

高速缓存有固定数量的缓冲区，这意味着如果文件系统请求一个不在缓存中的磁盘块，高速缓存必须换出一个已经放入磁盘快的缓冲区，这里的置换策略是 LRU，假设最近未使用的块不太可能再被使用。
