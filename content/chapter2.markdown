###第2章

###页表

操作系统通过页表这种机制来实现了对内存空间的控制。页表使得 xv6 能够让多不同处理器的多个地址空间映射到相同的物理内存上，还能够为不同的处理器的内存提供保护。
我们还能够间接地通过使用页表来完成一些特殊技巧。xv6 主要利用页表来区分多个地址空间，保护内存。另外，它也使用了一些简单的技巧，即把不同地址空间的多段内存映射到同一段物理内存（内核部分），在同一地址空间中多次映射同一段物理内存（用户部分的每一页都会映射到内核部分），以及通过一个没有映射的页保护用户栈。本章的其余部分将详细地探讨 x86 硬件提供的页表以及 xv6 对页表的使用。

####分页硬件

回顾一下，x86 的指令（用户和内核均是如此）计算的都是虚拟地址。机器的 RAM，或者物理内存，则是用物理地址来作标记的。x86 的页表硬件通过映射机制将虚拟地址和物理地址联系起来。

一个 x86 页表就是一个包含2^20（1,048,576）条*页表条目*（PTEs）的数组。每条 PTE 包含了一个20位的物理页号（PPN）及一些标志位。分页硬件要找到一个虚拟地址对应的 PTE，只需使用其高20位来找到该虚拟地址在页表中的索引，然后把其高20位替换为对应 PTE 的 PPN。而低12位是会被分页硬件原样复制的。因此在虚拟地址-物理地址的翻译机制下，页表可以为操作系统提供对一块块大小为4096（2^12）字节的内存片，这样的一个内存片就是一*页*。

如图2-1所示，实际上，地址的翻译有两个步骤。一个页表在物理内存中像一棵两层的树。树的根是一个4096字节的*页目录*，其中包含了1024个类似 PTE 的条目，但其实每个条目是指向一个*页表页*的引用。而每个页表页又是包含1024个32位 PTE 的数组。分页硬件使用虚拟地址的高10位来决定对应页目录条目。如果想要的条目已经放在了页目录中，分页硬件就会继续使用接下来的10位来从页表页中选择出对应的 PTE。否则，分页硬件就会抛出错误。通常情况下，大部分虚拟地址不会进行映射，而这样的二级结构就使得页目录可以忽略那些没有任何映射的页表页。

每个 PTE 都包含一些标志位，告诉分页硬件对应的虚拟地址的使用权限。PTE_P 表示 PTE 是否陈列在页表中：如果不是，那么一个对该页的引用会引发错误（譬如：不允许被使用）。PTE_W 控制着能否对页执行写指令；如果不能，则只允许对其进行读指令和取指令。PTE_U 控制着用户程序能否使用该页；如果不能，则只有内核能够使用该页。图2-1对此进行了说明。这些的标志位和页表硬件相关的结构体都在 `mmu.h（0200）`定义。

下面对一些名词作出解释。物理内存是指 DRAM 中的储存单元。每个字节的物理内存都有一个地址，成为物理地址。而虚拟地址则是程序所使用的。分页硬件会将程序发出的虚拟地址翻译为物理地址，然后发送给 DRAM 硬件以读写存储器。这一层面的讨论中我们仅仅考虑虚拟地址，暂不考虑虚拟内存。

####进程地址空间

`entry` 中建立的页表已经产生了足够多的映射来让内核的 C 代码正常运行。但是 `main` 还是调用了 `kvmalloc（1757）` 立即转换到新的页表中，这是因为内核建立的页表更加精巧地映射了内存空间。

每个进程都有自己的页表，xv6 会在进程切换时通知分页硬件切换页表。如图表2-2所示，进程的用户内存从0开始，最多能够增长到 `KERNBASE`, 这使得一个进程最多只能使用2GB的内存。当进程向 xv6 要求更多的内存时，xv6 首先要找到空闲的物理页，然后把这些页对应的 PTE 加入该进程的页表中，并让 PTE 指向对应的物理页。xv6 设置了 PTE 中的 `PTE_U` 、`PTE_W`、`PTE_P` 标志位。大多数进程是用不完整个内存空间的；xv6 会把没有被使用的 PTE 的 `PTE_P` 标志位置0。不同进程的页表将其用户内存映射到不同的物理内存中，因此每个进程就拥有了私有的用户内存。

xv6 在每个进程的页表中都包含了内核运行所需要的所有映射，而这些映射都出现在 `KERNBASE` 之上。它将虚拟地址 `KERNBASE:KERNBASE+PHYSTOP` 映射到 `0:PHYSTOP`。这样映射的原因之一是内核可以使用自己的指令和数据；原因之二是内存有时需要对物理页进行写操作，譬如在创建页表页的时候，而使得每一个物理页都在对应的虚拟地址上被映射就让这些操作变得很方便。这样的安排有一个缺点，即 xv6 无法使用超过2GB的物理内存。有一些使用内存映射的 I/O 设备的物理内存在 0xFE000000 之上，对于这些设备 xv6 页表采用了直接映射。`KERNBASE` 之上的页对应的 PTE 中，`PTE_U` 位均被置0，因而只有内核能够使用这些页。

每个进程的页表同时包括用户内存和内核内存的映射，这样当用户通过中断或者系统调用转入内核时就不需要进行页表的转换了。由于大部分内核都没有自己的页表，所以内核几乎都是在借用用户进程的页表。

现在来回顾一下，xv6 保证了每个进程只能使用其自己的内存，并且每个进程所看到的内存都是从虚拟地址0开始的一段连续内存。对于一个进程，xv6 只把该进程所使用的内存对应的 PTE 的 `PTE_U` 设为1，其他 PTE 则不然，这样就可以实现前者。对于后者的实现，则是通过让页表把连续的虚拟页映射到实际分配的物理页。

####代码：建立一个地址空间

`main` 调用 `kvmalloc（1757）`，创建并切换到一个拥有内核运行所需的 `KERNBASE` 以上映射的页表。这里的大多数工作都是由  `setupkvm（1737）`完成的。首先，它会分配一页内存来放置页目录，然后调用 `mappages` 来建立内核需要的映射，这些映射可以在 `kmap（1728）`数组中找到。这里的映射包括内核的指令和数据， `PHYSTOP` 以下的物理内存，以及 I/O 设备所占的内存。`setupkvm` 不会建立任何用户内存的映射，这些映射稍后会建立。

`mappages（1679）`做的工作是在页表中建立一段虚拟内存到一段物理内存的映射。它使在页的级别，即一页一页地建立映射的。对于每一个待映射虚拟地址，`mappages` 调用 `walkpgdir` 来找到该地址对应的 PTE 地址。然后初始化该 PTE 以保存对应物理页号、许可级别（`PTE_W` 和/或 `PTE_U`）以及 `PTE_P` 位来标记该 PTE 是否是有效的（1691）。

`walkpgdir（1654）`模仿 x86 的分页硬件为一个虚拟地址寻找 PTE 的过程（见图表2-1）。`walkpgdir` 通过虚拟地址的前10位来找到在页目录中的对应条目（1659），如果该条目不存在，说明要找的页表页尚未分配；如果 `alloc` 参数被设置了，`walkpgdir` 会分配页表页并将其物理地址放到页目录中。最后用虚拟地址的后面10位来找到其在页表中的 PTE 地址（1672）。

####物理内存的分配

在运行时，内核需要为页表、进程的用户内存、内核栈及通道缓冲区分配空闲的物理内存。

xv6 使用内核部分和 `PHYSTOP` 之间的物理内存为运行时分配提供内存资源。每次分配，它会将整块4096字节大小的页分配出去。xv6 还会通过维护一个物理页组成的链表来寻找空闲页。所以，分配内存需要将页移出该链表，而释放内存需要将页加入该链表。

这里我们遇到了一个自举的问题：为了让分配器能够初始化该空闲链表，所有的物理内存都必须要建立起映射，但是建立包含这些映射的页表又必须要分配存放页表的页。xv6 通过在 `entry` 中使用一个特别的页分配器来解决这个问题。该分配器会在内核数据部分的后面分配内存。该分配器不支持释放内存，并受限于 `entrypgdir` 中规定的4MB分配大小。即便如此，该分配器还是足够为内核的第一个页表分配出内存。

####代码：物理内存分配器

分配器中的数据结构是一个由可分配物理内存页构成的 `free list`。这个空闲页的链表的元素是结构体 `struct run（2764）`。那么存放这些数据结构的内存在哪个呢？实际上分配器将每个空闲页的 `run` 结构体保存在该空闲页本身里面，否则就无处可放了。分配器还用一个 `spin lock（2764-2766）`来保护空闲链表。链表和这个锁都包装在一个结构体中，这样逻辑就比较明晰：锁保护了该结构体中的域。不过现在让我们先忽略这个锁，以及对 `acquire` 和 `release` 的调用；我们会在第4章了解其细节。

`main` 函数调用了 `kinit1` 和 `kinit2` 两个函数对分配器进行初始化（2780）。这样做是由于 `main` 中的大部分代码都不能使用锁以及4mb以上的内存。`kinit1` 在前4mb进行了不需要锁的内存分配。而 `kinit2` 允许了锁的使用并分配了更多内存。原本应该由 `main` 决定有多少物理内存可用于分配，但在 x86 上很难实现。所以它假设机器中有240mb（`PHYSTOP`），并将内核部分和 `PHYSTOP` 之间的内存都作为一个初始的空闲内存池。`kinit1` 和 `kinit2` 调用 `freerange` 将内存加入空闲链表中，`freerange` 则是通过对每一页调用 `kfree` 实现该功能。一个 PTE 只能指向一个4096字节对齐的物理地址（即是4096的倍数），因此 `freerange` 用 `PGROUNDUP` 来保证分配器只会释放对齐的物理地址。分配器原本一开始没有内存可用，正是上面讲到的对 `kfree` 的调用给了分配器可管理使用的内存。

分配器会通过高地址的虚拟地址找到它们映射的物理页，而非通过其物理地址。所以 `kinit` 会使用 `p2v(PHYSTOP)`来将 `PHYSTOP（一个物理地址）` 翻译为虚拟地址。分配器有时将地址看作是整型，这是为了对其进行运算（譬如在 `kinit` 中遍历所有页）；而有时将地址看作读写内存用的指针（譬如操作每个页中的 `run` 结构体）；对地址的双重使用导致分配器代码中充满了类型转换。另外一个原因是，释放和分配内存隐性地改变了内存的类型。

函数 `kfree（2815）`首先将被释放内存的每一位设为1。这使得访问已被释放内存的代码所读到的不是原有数据，而是垃圾数据；这样做使得我们能更早地让这种错误代码崩溃。接下来 `kfree` 把 `v` 转换为一个指向结构体 `struct run` 的指针，在 `r->next` 中保存原有空闲链表的表头，然后将当前的空闲链表设置为 `r`。`kalloc` 移除并返回空闲链表的表头。

####地址空间中的用户部分

图表2-3展示了在 xv6 中，一个运行中进程的用户内存结构。堆在栈之上，所以它可以增长（通过 `sbrk`）。栈占用了单独的一页内存，在 `exec` 建立的初始内容中可以看到。栈的最上方放着字符串形式的命令行参数以及指向这些参数的指针数组，其下方放的值使得一个程序可以从 `main` 开始，仿佛刚刚调用了函数 `main(argc, argv)`。为了防止栈的使用超出了栈应该使用的页，栈的下方有一个保护页。保护页没有映射，因此当栈的使用进入到该页时，就会产生异常，无法翻译这个错误的地址。

####代码：`exec`

