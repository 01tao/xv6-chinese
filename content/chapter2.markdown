###第2章

###页表

一个 x86 页表就是一个包含2^20（1,048,576）条*页表条目*（PTEs）的数组。每条 PTE 包含了一个20位的物理页号（PPN）及一些标志位。分页硬件要找到一个虚拟地址对应的 PTE，只需使用其高20位来找到该虚拟地址在页表中的索引，然后把其高20位替换为对应 PTE 的 PPN。而低12位是会被分页硬件原样复制的。因此在虚拟地址-物理地址的翻译机制下，页表可以为操作系统提供对一片片大小为4096（2^12）字节的内存块，这样的一片内存块就是一*页*。

如图1-1所示，实际上，地址的翻译发生在两个步骤中。一个页表在物理内存中像一棵两层的树。树的根是一个4096字节的*页目录*，其中包含了1024个类似 PTE 的条目，但其实每个条目是指向一个*页表页*的引用。而每个页表页又是包含1024个32位 PTE 的数组。分页硬件使用虚拟地址的高10位来决定对应页目录条目。如果想要的条目已经放在了页目录中，分页硬件酒会继续使用接下来的10位来从页表页中选择出对应的 PTE。否则，分页硬件就会抛出错误。通常情况下，大部分虚拟地址不会进行映射，而这样的二级结构就使得一个页表可以忽略它包含的所有页。

每个 PTE 都包含一些标志位，告诉分页硬件对应的虚拟地址的使用权限。PTE_P 表示 PTE 是否陈列在页表中：如果不是，那么一个对该页的引用会引发错误（譬如：不允许被使用）。PTE_W 控制着能否对页执行写指令；如果不能，则只允许对其进行读指令和取指令。PTE_U 控制着用户程序能否使用该页；如果不能，则只有内核能够使用该页。图1-1对此进行了说明。

下面对一些名词作出解释。物理内存是指 DRAM 中的储存单元。每个字节的物理内存都有一个地址，成为物理地址。而虚拟地址则是程序所使用的。分页硬件会将程序发出的虚拟地址翻译为物理地址，然后发送给 DRAM 硬件以读写存储器。这一层面的讨论中我们仅仅考虑虚拟地址，暂不考虑虚拟内存。

当一台 PC 开机时，它进行了初始化，从磁盘向内存中载入一个 *boot loader* 并运行之。附录 B 阐述了更多细节。xv6 的 boot loader 从磁盘中载入 xv6 内核，从 *entry(1040)* 开始运行它。x86 的分页硬件此时还不能工作，所以虚拟地址是直接映射到物理地址上的。

Boot loader 将 xv6 内核装载到内存的物理地址0x100000处。我们注意到内核没有被装载到0x80100000处，这里本是应该存放内核的指令及代码的地方。这是因为在小机器上可能不会有这么大的物理内存。而之所以放在0x100000而非0x0则是因为地址0xa0000到0x100000包括了比较老的I/O设备。为了让内核的剩余部分能运行，*entry* 建立了一个页表，将从0x80000000开始的虚拟地址（称为 KERNBASE(0207)）映射到0x0开始的物理地址。
