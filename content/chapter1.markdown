### 第1章

###第一个进程

本章通过第一个进程的创建，向我们解释了 xv6 是如何开始运行的，让我们得以一窥 xv6 提供的各个主要抽象概念是如何实现和互动的。xv6 努力避免为第一个进程的建立单独写出一段代码，相反，xv6 尽量复用实现普通操作的代码来建立第一个进程。接下来各小节将详细探索其中的概念。    

xv6 运行在使用 Intel 80386 及其之后（即"x86"）处理器的 PC 平台上，因而它的许多底层功能（譬如虚存的实现）是 x86 处理器专有的。本书假设读者已有些许在某些体系结构上进行机器级编程的经验。我们将在 x86 特有的相关概念出现时，对其进行介绍。附录 A 中简洁地描绘了 PC 平台的整体框架。

####进程概览

进程是一个抽象概念，它向一个程序展示程序所能使用的机器资源，仿佛这个程序独占了该机器。一个进程向一个程序提供了其他进程不能读写的内存空间，或者称之为*地址空间*。同时进程还使得程序运行在一个独享CPU的环境中。

xv6 使用页表（由硬件实现）来给每个进程自己的地址空间。页表将*虚拟地址*（x86 指令所使用的地址）翻译（或说“映射”）为*物理地址*（处理器芯片向主存发送的地址）。

xv6 为每个进程维护了不同的页表，这样就可以合理地定义进程的地址空间了。如图表1-1所示，一片地址空间包含了从虚拟地址0开始的进程的*用户内存*。进程的指令通常放在地址最低处，接下来则是全局变量，栈区，以及一个由用户按需拓展的“堆”区（malloc 用）。

和上面提到的用户程序的内存一样，内核程序也会被进程映射到每个进程的地址空间中。当进程使用系统调用时，系统调用实际上会在内核于进程地址空间中的映射区域执行。这种设计使得内核的系统调用代码可以直接指向用户内存中。为了给用户留下足够的空间，xv6 的地址空间将内核映射到了高地址处，即从0x80100000开始。

xv6 使用结构体 *struct proc* 来维护一个进程的状态，其中最为重要的状态是进程的页表，内核栈，以及当前运行状态。我们接下来会用 *p->xxx* 来指代 *proc* 结构中的元素。

建立进程这个概念有一个重要目的，即区分共享相同电脑资源的不同程序，这样当其中一个程序崩溃时，不至于让其他程序都无法运行。一个进程为一个程序提供了其他程序无法读写的内存空间（或称地址空间）。本章解释了 xv6 是如何通过配置处理器的分页硬件来为进程提供私有地址空间的，xv6 是如何开辟内存空间来存放进程代码、数据的，以及 xv6 是如何创建新进程的。

方法·


