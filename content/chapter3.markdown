### Chapter 3

### 陷入，中断和驱动

运行进程时，cpu 一直处于一个大循环中：取指，更新 PC，执行，反复……。但有些情况下用户程序的控制必须转移回内核，而不是执行下一条指令。这些情况包括设备信号、用户程序的非法操作（引用一个没有 PTE 的虚拟地址）。处理这些事件有三大挑战：1）内核必须使得处理器从用户态转换到内核态（并且再转换回用户态）2）内核的设备必须协调好他们并行的活动。3）内核必须非常清楚硬件接口。解决这三个问题需要对硬件的深入理解和小心翼翼的编程，并且有可能导致不透明的内核代码。这一章告诉你 xv6 是如何解决这些问题的。

#### 系统调用，异常和中断

用户程序通过系统调用请求系统服务，正如我们上一章最后所见。术语`exception`指产生中断的非法程序操作，例如除以0，尝试访问 PTE 不存在的内存等等。术语`interrupt`指硬件产生的希望引起操作系统注意的信号，例如时钟芯片可能每100毫秒产生一个中断，利用此来实现分时。再举一个例子，当硬盘从硬盘读了一个块时，它产生一个中断来提醒操作系统这个块已经准备好被获取了。

内核管理所有的中断，而不是进程，因为在大多数情况下只有内核拥有所需的特权和状态。例如为了使进程响应时钟中断而在进程间实现时间切片，就必须在内核中执行这些操作，因为我们有可能强迫不协调的进程服从处理器的调度。

在三种情况下，